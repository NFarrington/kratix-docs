"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[7494],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),k=l,d=m["".concat(s,".").concat(k)]||m[k]||c[k]||r;return n?a.createElement(d,o(o({ref:t},u),{},{components:n})):a.createElement(d,o({ref:t},u))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,o=new Array(r);o[0]=m;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:l,o[1]=i;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2431:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var a=n(7462),l=(n(7294),n(3905));const r={description:"Install Kratix and multiple Promises",title:"Part 1",id:"using-multiple-promises",slug:"/events/2022-kcduk/using-multiple-promises"},o="Use Kratix Promises to build a paved path",i={unversionedId:"events/kcduk/using-multiple-promises",id:"events/kcduk/using-multiple-promises",title:"Part 1",description:"Install Kratix and multiple Promises",source:"@site/docs/events/2022-kcduk/01-using-multiple-promises.md",sourceDirName:"events/2022-kcduk",slug:"/events/2022-kcduk/using-multiple-promises",permalink:"/docs/events/2022-kcduk/using-multiple-promises",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/events/2022-kcduk/01-using-multiple-promises.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{description:"Install Kratix and multiple Promises",title:"Part 1",id:"using-multiple-promises",slug:"/events/2022-kcduk/using-multiple-promises"},sidebar:"events",previous:{title:"KCD UK 2022 Workshop",permalink:"/docs/category/kcd-uk-2022-workshop"},next:{title:"Part 2",permalink:"/docs/events/2022-kcduk/writing-a-jenkins-promise"}},s={},p=[{value:"Bootstrap a local cluster with Kratix",id:"set-up",level:2},{value:"System setup",id:"pre-requisites",level:3},{value:"Update your Docker resource allocations",id:"docker-config",level:4},{value:"Quick Start Kratix",id:"quick-start-kratix",level:3},{value:"Install multiple promises as a platform engineer",id:"platform-engineer",level:2},{value:"The power of Promises",id:"power-of-promises",level:3},{value:"Install all required Promises",id:"install-all-promises",level:3},{value:"Request an instance as an application developer",id:"application-developer",level:2},{value:"Run the application",id:"run-the-application",level:3},{value:"Validate the deployment",id:"validate-deployment",level:3},{value:"Test the deployed application",id:"test-app",level:3},{value:"Summary",id:"summary",level:2},{value:"\ud83c\udf89 \xa0 Congratulations!",id:"--congratulations",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,l.kt)("wrapper",(0,a.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"use-kratix-promises-to-build-a-paved-path"},"Use Kratix Promises to build a paved path"),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"In this tutorial, you will")),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#set-up"},"Bootstrap a local cluster with Kratix")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#platform-engineer"},"Install multiple promises as a platform engineer")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("a",{parentName:"li",href:"#application-developer"},"Request an instance as a application developer"))),(0,l.kt)("h2",{id:"set-up"},"Bootstrap a local cluster with Kratix"),(0,l.kt)("h3",{id:"pre-requisites"},"System setup"),(0,l.kt)("p",null,"For this workshop, we'll use Kratix on two local Kubernetes clusters. Install the prerequisites listed below if they aren't already on your system."),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"kind")," CLI / ",(0,l.kt)("strong",{parentName:"p"},"Kubernetes-in-Docker(KinD)"),": ",(0,l.kt)("br",null),"\nUsed to create and manage local Kubernetes clusters in Docker. ",(0,l.kt)("br",null),"\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://kind.sigs.k8s.io/docs/user/quick-start/"},"the quick start guide")," to install.")),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"docker")," CLI / ",(0,l.kt)("strong",{parentName:"p"},"Docker"),": ",(0,l.kt)("br",null),"\nUsed to orchestrate containers. ",(0,l.kt)("inlineCode",{parentName:"p"},"kind")," (above) requires that you have Docker installed and configured. ",(0,l.kt)("br",null),"\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://docs.docker.com/get-docker/"},"Get Docker")," to install."),(0,l.kt)("admonition",{parentName:"li",type:"caution"},(0,l.kt)("p",{parentName:"admonition"},"Docker Desktop (For Mac) v4.13.0 has a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/docker/for-mac/issues/6530"},"known issue")," that crashes Docker Daemon on specific situations. Please ensure you are using an earlier or later version of Docker."))),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("inlineCode",{parentName:"p"},"kubectl")," / ",(0,l.kt)("strong",{parentName:"p"},"Kubernetes command-line tool"),": ",(0,l.kt)("br",null),"\nThe CLI for Kubernetes","\u2014","allows you to run commands against Kubernetes clusters.",(0,l.kt)("br",null),"\nSee ",(0,l.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/tools/#kubectl"},"the install guide"),"."))),(0,l.kt)("h4",{id:"docker-config"},"Update your Docker resource allocations"),(0,l.kt)("p",null,"In order to complete all tutorials in this series, you must allocate enough resources to Docker. Docker requires:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"5 CPU"),(0,l.kt)("li",{parentName:"ul"},"12GB Memory"),(0,l.kt)("li",{parentName:"ul"},"4GB swap")),(0,l.kt)("p",null,"This can be managed through your tool of choice (e.g. Docker Desktop, Rancher, etc)."),(0,l.kt)("h3",{id:"quick-start-kratix"},"Quick Start Kratix"),(0,l.kt)("p",null,"You need a fresh installation of Kratix for this workshop. The simplest way to bootstrap your environment is running the quick-start script from within the Kratix directory."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"git clone https://github.com/syntasso/kratix.git\ncd kratix\n./scripts/quick-start.sh --recreate\n")),(0,l.kt)("h2",{id:"platform-engineer"},"Install multiple promises as a platform engineer"),(0,l.kt)("h3",{id:"power-of-promises"},"The power of Promises"),(0,l.kt)("p",null,"Promises are the building blocks that enable teams to design platforms that specifically meet their customer needs. Through writing and extending Promises, Platform teams can raise the value line of the platform they provide. They can use multiple simpler, low-level Promises to provide an experience tailored to their users needs."),(0,l.kt)("p",null,"Consider the task of setting up development environments for application teams. This task is usually repetitive and requires many cookie-cutter steps. It may involve wiring up Git repos, spinning up a CI/CD server, creating a PaaS to run the applications, instructing CI/CD to listen to the Git repos and push successful builds into the PaaS, and finally wiring applications to their required data services."),(0,l.kt)("p",null,"A Promise can encapsulate all the required steps and handle the toil of running those low-level tasks. It can be designed as a single Promise that does it all, or it can be a collection of Promises that, combined, deliver the desired functionality."),(0,l.kt)("p",null,"Now you will see the power of Kratix Promises by deploying a web app that uses multiple Promises."),(0,l.kt)("br",null),(0,l.kt)("hr",null),(0,l.kt)("br",null),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Overview",src:n(8498).Z,width:"1528",height:"937"})),(0,l.kt)("h3",{id:"install-all-promises"},"Install all required Promises"),(0,l.kt)("p",null,"In order for an application team to deploy an application to a dev environment they require a relational datastore (postgres) and networking for user traffic (Knative). To deliver this functionality on-demand with Kratix install the required Promises on your platform cluster:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/samples/postgres/postgres-promise.yaml\nkubectl --context kind-platform apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/samples/knative-serving/knative-serving-promise.yaml\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Verify the Promises are all installed on your platform cluster"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform get promises\n")),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                      AGE\n#highlight-start\nha-postgres-promise       1m\nknative-serving-promise   1m\n#highlight-end\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Verify the CRDs are all installed on your platform cluster. Note that you know have ",(0,l.kt)("inlineCode",{parentName:"p"},"knativeserving")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"postgres")," available."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform get crds\n")),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                          CREATED AT\nclusters.platform.kratix.io                   2022-09-23T14:37:20Z\n#highlight-start\nknativeservings.example.promise.syntasso.io   2022-09-23T14:38:48Z\npostgreses.example.promise.syntasso.io        2022-09-23T14:38:51Z\n#highlight-end\npromises.platform.kratix.io                   2022-09-23T14:37:20Z\nworkplacements.platform.kratix.io             2022-09-23T14:37:20Z\nworks.platform.kratix.io                      2022-09-23T14:37:20Z\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Verify the ",(0,l.kt)("code",null,"workerClusterResources")," are installed on your worker cluster",(0,l.kt)("br",null),(0,l.kt)("sub",null,"(This may take a few minutes so ",(0,l.kt)("code",null,"--watch")," will watch the command. Press ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"C")," to stop watching)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get pods --watch\n")),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                 READY   STATUS    RESTARTS   AGE\n#highlight-start\npostgres-operator-7dccdbff7c-2hqhc   1/1     Running   0          1m\n#highlight-end\n")),(0,l.kt)("br",null),(0,l.kt)("h2",{id:"application-developer"},"Request an instance as an application developer"),(0,l.kt)("p",null,(0,l.kt)("img",{alt:"Overview-instances",src:n(3052).Z,width:"1783",height:"1294"})),(0,l.kt)("p",null,"Submit a set of Kratix Resource Requests to get a Knative Serving component and a Postgres database."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/samples/postgres/postgres-resource-request.yaml\nkubectl --context kind-platform apply --filename https://raw.githubusercontent.com/syntasso/kratix/main/samples/knative-serving/knative-serving-resource-request.yaml\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"By requesting these resources, you will kick off two creation pipelines on the platform cluster. These pipelines are defined by the Promises you previously installed and can be seen by running the following command"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform get pods --watch\n")),(0,l.kt)("p",null,"This will result in a similar output to below:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                                     READY   STATUS      RESTARTS   AGE\n#highlight-start\nrequest-pipeline-ha-postgres-promise-default-266c2       0/1     Completed   0          1m\nrequest-pipeline-knative-serving-promise-default-4ffed   0/1     Completed   0          1m\n#highlight-end\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"These pipelines will result in two pods being stared on the worker cluster which create a postgres cluster (named per the Resource Request name, ",(0,l.kt)("code",null,"acid-minimal"),"). To verify you have all the necessary resources up and running",(0,l.kt)("br",null),(0,l.kt)("sub",null,"(This may take a few minutes so ",(0,l.kt)("code",null,"--watch")," will watch the command. Press ",(0,l.kt)("kbd",null,"Ctrl"),"+",(0,l.kt)("kbd",null,"C")," to stop watching)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get pods --watch\n")),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                      READY   STATUS    RESTARTS         AGE\n#highlight-start\nacid-minimal-cluster-0                    1/1     Running   0                5m\nacid-minimal-cluster-1                    1/1     Running   0                5m\n#highlight-end\npostgres-operator-6c6dbd4459-4jf5h        1/1     Running   0                10m\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Verify that knative has also installed its networking resources into two new namespaces"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get namespaces\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                   STATUS   AGE\ndefault                Active   5m\nflux-system            Active   5m\n#highlight-start\nknative-serving        Active   1m\nkourier-system         Active   1m\n#highlight-end\nkratix-worker-system   Active   3m\nkube-node-lease        Active   5m\nkube-public            Active   5m\nkube-system            Active   5m\nlocal-path-storage     Active   5m\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Verify that the Kratix Resource Request was issued on the platform cluster."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-platform get postgreses.example.promise.syntasso.io\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME                    AGE\n#highlight-start\nacid-minimal-cluster    1m\n#highlight-end\n")),(0,l.kt)("h3",{id:"run-the-application"},"Run the application"),(0,l.kt)("p",null,"With all the necessary resources available, you can now run your app using the just created services. In this step, you will deploy a ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/syntasso/sample-golang-app"},"sample application")," that uses Postgres for persistence and Knative for serving the application."),(0,l.kt)("p",null,"To deploy the app, run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker apply --filename https://raw.githubusercontent.com/syntasso/sample-golang-app/main/k8s/serving.yaml\n")),(0,l.kt)("admonition",{type:"note"},(0,l.kt)("p",{parentName:"admonition"},"It takes some time for Knative to get up and running. If you get a webhook-related error wait a few minutes\nbefore trying the command again.")),(0,l.kt)("h3",{id:"validate-deployment"},"Validate the deployment"),(0,l.kt)("p",null,"Verify that the Knative Service for the application is ready:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker get services.serving.knative.dev\n")),(0,l.kt)("p",null,"The above command will give an output similar to"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"NAME   URL                             LATESTCREATED   LATESTREADY   READY   REASON\n#highlight-start\ntodo   http://todo.default.local.gd    todo-00001      todo-00001    True\n#highlight-end\n")),(0,l.kt)("br",null),(0,l.kt)("h3",{id:"test-app"},"Test the deployed application"),(0,l.kt)("p",null,"Now test the app."),(0,l.kt)("p",null,"On a separate terminal, you'll need to open access to the app by port-forwarding the kourier service:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker --namespace kourier-system port-forward svc/kourier 8081:80\n")),(0,l.kt)("br",null),(0,l.kt)("p",null,"Now go to ",(0,l.kt)("a",{parentName:"p",href:"http://todo.default.local.gd:8081"},"http://todo.default.local.gd:8081")," to see the app running."),(0,l.kt)("h2",{id:"summary"},"Summary"),(0,l.kt)("p",null,"Your platform has pieced together two different Promises to provide a solution for an application team to deploy a new service using Knative and Postgres. Well done!"),(0,l.kt)("p",null,"To recap the steps we took:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Installed two Kratix Promises"),(0,l.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Requested an instance of each Kratix Promise"),(0,l.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Pushed an application to Knative that integrates with the instance of Postgres"),(0,l.kt)("li",{parentName:"ol"},"\u2705","\xa0","\xa0","Viewed our successfully running application!")),(0,l.kt)("p",null,"This is only the beginning of working with Promises. Next you will learn how to write a Promise."),(0,l.kt)("h2",{id:"--congratulations"},"\ud83c\udf89 ","\xa0"," Congratulations!"),(0,l.kt)("p",null,"\u2705","\xa0","\xa0"," You have deployed a web app that uses multiple Kratix Promises. ",(0,l.kt)("br",null),"\n\ud83d\udc49\ud83c\udffe","\xa0","\xa0"," Now you will ",(0,l.kt)("a",{parentName:"p",href:"writing-a-jenkins-promise"},"write your own Jenkins Promise to learn more about how Kratix Promises work"),"."))}c.isMDXComponent=!0},3052:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Treasure_Trove-Get_instances_of_multiple_Promises_no_jenkins-49f1269aae703e2c079ae0de385433f3.jpeg"},8498:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Treasure_Trove-Install_Multiple_Promises_no_jenkins-8fc69310ecee3cc16bc921ae40485558.jpeg"}}]);