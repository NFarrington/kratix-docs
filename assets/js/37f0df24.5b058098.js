"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[4080],{3905:(t,e,n)=>{n.d(e,{Zo:()=>p,kt:()=>k});var r=n(7294);function i(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function a(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);e&&(r=r.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,r)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?a(Object(n),!0).forEach((function(e){i(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,r,i=function(t,e){if(null==t)return{};var n,r,i={},a=Object.keys(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||(i[n]=t[n]);return i}(t,e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);for(r=0;r<a.length;r++)n=a[r],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}var l=r.createContext({}),u=function(t){var e=r.useContext(l),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},p=function(t){var e=u(t.components);return r.createElement(l.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return r.createElement(r.Fragment,{},e)}},m=r.forwardRef((function(t,e){var n=t.components,i=t.mdxType,a=t.originalType,l=t.parentName,p=s(t,["components","mdxType","originalType","parentName"]),m=u(n),k=i,d=m["".concat(l,".").concat(k)]||m[k]||c[k]||a;return n?r.createElement(d,o(o({ref:e},p),{},{components:n})):r.createElement(d,o({ref:e},p))}));function k(t,e){var n=arguments,i=e&&e.mdxType;if("string"==typeof t||i){var a=n.length,o=new Array(a);o[0]=m;var s={};for(var l in e)hasOwnProperty.call(e,l)&&(s[l]=e[l]);s.originalType=t,s.mdxType="string"==typeof t?t:i,o[1]=s;for(var u=2;u<a;u++)o[u]=n[u];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3273:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var r=n(7462),i=(n(7294),n(3905));const a={description:"Instructions on how to setup Kratix with Git",title:"Running with Git"},o=void 0,s={unversionedId:"main/guides/installing-kratix/running-with-git",id:"main/guides/installing-kratix/running-with-git",title:"Running with Git",description:"Instructions on how to setup Kratix with Git",source:"@site/docs/main/05-guides/01-installing-kratix/03-running-with-git.md",sourceDirName:"main/05-guides/01-installing-kratix",slug:"/main/guides/installing-kratix/running-with-git",permalink:"/docs/main/guides/installing-kratix/running-with-git",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/main/05-guides/01-installing-kratix/03-running-with-git.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{description:"Instructions on how to setup Kratix with Git",title:"Running with Git"},sidebar:"mainSidebar",previous:{title:"Single Cluster with minikube",permalink:"/docs/main/guides/installing-kratix/single-cluster-with-minikube"},next:{title:"Installing and using a Promise",permalink:"/docs/main/guides/installing-a-promise"}},l={},u=[{value:"Installing Kratix",id:"installing-kratix",level:2},{value:"Set up a Platform Cluster",id:"platform-setup",level:3},{value:"Set up your Worker Cluster",id:"worker-setup",level:3}],p={toc:u};function c(t){let{components:e,...n}=t;return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Kratix talks to the Worker clusters through a Repository. This Repository can be\neither be a Git server (like Github or Gitea) or a S3-compatible object store\n(like GCS and MinIO). Check ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/reference/architecture"},"the reference architecture for more\ndetails"),"."),(0,i.kt)("p",null,"This page documents how to setup Kratix with Git on a KinD cluster. It will also\ninstall and instantiate Gitea as the Git server. To deploy Kratix with an\nS3-compatible repository, check out ",(0,i.kt)("a",{parentName:"p",href:"/docs/main/guides/installing-kratix"},"this guide"),"."),(0,i.kt)("h2",{id:"installing-kratix"},"Installing Kratix"),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"You can also run ",(0,i.kt)("inlineCode",{parentName:"p"},"./scripts/quick-start.sh --git")," from the root of the ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/syntasso/kratix"},"Kratix\nrepository"),".")),(0,i.kt)("h3",{id:"platform-setup"},"Set up a Platform Cluster"),(0,i.kt)("p",null,"Create your ",(0,i.kt)("inlineCode",{parentName:"p"},"platform")," cluster and install Gitea and Kratix. Gitea will be the\nrepository for the GitOps toolkit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'kind create cluster --name platform\n\n# Install Gitea\nkubectl apply --context kind-platform --filename https://raw.githubusercontent.com/syntasso/kratix/main/hack/platform/gitea-install.yaml\n\n# Install Kratix\ncurl -s https://raw.githubusercontent.com/syntasso/kratix/main/distribution/kratix.yaml | sed "s/repository-type=s3/repository-type=git/g" |\n   kubectl apply --filename -\n')),(0,i.kt)("h3",{id:"worker-setup"},"Set up your Worker Cluster"),(0,i.kt)("p",null,"Create your Kratix ",(0,i.kt)("inlineCode",{parentName:"p"},"worker")," cluster and install ",(0,i.kt)("a",{parentName:"p",href:"https://fluxcd.io/"},"Flux"),". This\nwill create a cluster for running the X as-a-Service workloads:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kind create cluster --name worker\n\n# Register the Worker Cluster with the Platform Cluster\nkubectl apply --context kind-platform --filename https://raw.githubusercontent.com/syntasso/kratix/main/config/samples/platform_v1alpha1_worker_cluster.yaml\n\n# Ensure Gitea is running on the Platform\nkubectl wait pod --context kind-platform -n gitea --selector app=gitea --for=condition=ready\n\n# Install flux on the worker\nkubectl apply --context kind-worker --filename https://raw.githubusercontent.com/syntasso/kratix/main/hack/worker/gitops-tk-install.yaml\nkubectl apply --context kind-worker --filename https://raw.githubusercontent.com/syntasso/kratix/main/hack/worker/gitops-tk-resources-git.yaml\n")),(0,i.kt)("p",null,"Flux will eventually reconcile the clusters state, making the ",(0,i.kt)("inlineCode",{parentName:"p"},"worker")," cluster\nready to receive workloads. You can verify its readiness by observing the\n",(0,i.kt)("inlineCode",{parentName:"p"},"kratix-worker-system")," namespace appearing in the ",(0,i.kt)("inlineCode",{parentName:"p"},"worker")," cluster:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ kubectl --context kind-worker get namespaces\nNAME                   STATUS   AGE\n...\nkratix-worker-system   Active   1m\n...\n")),(0,i.kt)("p",null,"\ud83c\udf89   ",(0,i.kt)("strong",{parentName:"p"},"Congratulations!")," Kratix is now ready to receive workloads, backed by\nGit. Jump to ",(0,i.kt)("a",{parentName:"p",href:"../installing-a-promise"},"Installing and using a Promise")," to spin up\nyour first as-a-service workload."))}c.isMDXComponent=!0}}]);