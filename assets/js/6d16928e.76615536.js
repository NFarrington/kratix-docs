"use strict";(self.webpackChunkkratix_docs=self.webpackChunkkratix_docs||[]).push([[8271],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,k=c["".concat(l,".").concat(d)]||c[d]||m[d]||r;return n?a.createElement(k,s(s({ref:t},u),{},{components:n})):a.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[c]="string"==typeof e?e:i,s[1]=o;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),i=n(6010);const r="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,i.Z)(r,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),i=n(7294),r=n(6010),s=n(2389),o=n(7392),l=n(7094),p=n(2466);const u="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:t,block:n,defaultValue:s,values:m,groupId:d,className:k}=e,h=i.Children.map(e.children,(e=>{if((0,i.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),g=m??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),f=(0,o.l)(g,((e,t)=>e.value===t.value));if(f.length>0)throw new Error(`Docusaurus error: Duplicate values "${f.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const y=null===s?s:s??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==y&&!g.some((e=>e.value===y)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${y}" but none of its children has the corresponding value. Available values are: ${g.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:w,setTabGroupChoices:b}=(0,l.U)(),[v,N]=(0,i.useState)(y),x=[],{blockElementScrollPositionUntilNextRender:C}=(0,p.o5)();if(null!=d){const e=w[d];null!=e&&e!==v&&g.some((t=>t.value===e))&&N(e)}const P=e=>{const t=e.currentTarget,n=x.indexOf(t),a=g[n].value;a!==v&&(C(t),N(a),null!=d&&b(d,String(a)))},j=e=>{let t=null;switch(e.key){case"Enter":P(e);break;case"ArrowRight":{const n=x.indexOf(e.currentTarget)+1;t=x[n]??x[0];break}case"ArrowLeft":{const n=x.indexOf(e.currentTarget)-1;t=x[n]??x[x.length-1];break}}t?.focus()};return i.createElement("div",{className:(0,r.Z)("tabs-container",u)},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},k)},g.map((e=>{let{value:t,label:n,attributes:s}=e;return i.createElement("li",(0,a.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>x.push(e),onKeyDown:j,onClick:P},s,{className:(0,r.Z)("tabs__item",c,s?.className,{"tabs__item--active":v===t})}),n??t)}))),t?(0,i.cloneElement)(h.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):i.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function d(e){const t=(0,s.Z)();return i.createElement(m,(0,a.Z)({key:String(t)},e))}},6092:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>c,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(7462),i=(n(7294),n(3905));n(4996),n(5488),n(5162);const r={description:"Extend Kratix by writing your own Promise to provide CI-as-a-Service",title:"Part 2",id:"writing-a-ci-promise",slug:"/events/2022-kcduk/writing-a-ci-promise"},s="Writing a CI Promise",o={unversionedId:"events/kcduk/writing-a-ci-promise",id:"events/kcduk/writing-a-ci-promise",title:"Part 2",description:"Extend Kratix by writing your own Promise to provide CI-as-a-Service",source:"@site/docs/events/2022-kcduk/02-writing-a-jenkins-promise.md",sourceDirName:"events/2022-kcduk",slug:"/events/2022-kcduk/writing-a-ci-promise",permalink:"/docs/events/2022-kcduk/writing-a-ci-promise",draft:!1,editUrl:"https://github.com/syntasso/kratix-docs/tree/main/docs/events/2022-kcduk/02-writing-a-jenkins-promise.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{description:"Extend Kratix by writing your own Promise to provide CI-as-a-Service",title:"Part 2",id:"writing-a-ci-promise",slug:"/events/2022-kcduk/writing-a-ci-promise"},sidebar:"events",previous:{title:"Part 1",permalink:"/docs/events/2022-kcduk/using-multiple-promises"},next:{title:"Next steps",permalink:"/docs/events/2022-kcduk/next-steps"}},l={},p=[{value:"What you will do",id:"what-you-will-do",level:2},{value:"Platform Engineer",id:"platform-engineer",level:2},{value:"Directory setup",id:"directory-setup",level:3},{value:"Define your Promise API",id:"promise-api",level:3},{value:"Defining the name",id:"defining-the-name",level:4},{value:"Defining the xaasCrd",id:"defining-the-xaascrd",level:4},{value:"Define the Worker Cluster Resources",id:"worker-cluster-resources",level:3},{value:"Create your Resource Request Pipeline",id:"create-pipeline",level:3},{value:"Build a simple request pipeline",id:"pipeline-script",level:4},{value:"Define the Pipeline image",id:"define-the-pipeline-image",level:3},{value:"Install your Promise",id:"install-promise",level:3},{value:"Platform User",id:"platform-user",level:2},{value:"Submit a Kratix Resource Request",id:"create-resource-request",level:3},{value:"Use your Jenkins instance",id:"use-your-jenkins-instance",level:3},{value:"Review of a Kratix Promise parts (in detail)",id:"promise-review",level:3},{value:"<code>xaasCrd</code>",id:"xaascrd",level:4},{value:"<code>workerClusterResources</code>",id:"workerclusterresources",level:4},{value:"<code>xaasRequestPipeline</code>",id:"xaasrequestpipeline",level:4},{value:"Recap",id:"summary",level:2},{value:"Tearing it all down",id:"teardown",level:2}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"writing-a-ci-promise"},"Writing a CI Promise"),(0,i.kt)("h2",{id:"what-you-will-do"},"What you will do"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As a Platform Engineer")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#promise-api"},"Define you Promise API: ",(0,i.kt)("inlineCode",{parentName:"a"},"xaasCrd"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#worker-cluster-resources"},"Determine the pre-requisites: ",(0,i.kt)("inlineCode",{parentName:"a"},"workerClusterResources"))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#create-pipeline"},"Write the Request Pipeline: ",(0,i.kt)("inlineCode",{parentName:"a"},"xaasRequestPipeline")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"As a Platform User")),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("a",{parentName:"li",href:"#create-resource-request"},"Create and submit a Kratix Resource Request"))),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"platform-engineer"},"Platform Engineer"),(0,i.kt)("h3",{id:"directory-setup"},"Directory setup"),(0,i.kt)("p",null,"To begin writing a Promise you will need a basic directory structure to work in. You can\nuse our promise template to get started."),(0,i.kt)("p",null,"Run the following commands in a working directory of your choosing."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Clone Promise template"',title:'"Clone',Promise:!0,'template"':!0},"git clone https://github.com/syntasso/promise-template.git\ncd promise-template\n")),(0,i.kt)("h3",{id:"promise-api"},"Define your Promise API"),(0,i.kt)("h4",{id:"defining-the-name"},"Defining the name"),(0,i.kt)("p",null,"The first file we're going to touch is the ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml"),". This is where you\nwill define all the pieces that make of your promise. Let's start by giving the\nPromise a proper name. Update the ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata.name")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"ci"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="promise.yaml"',jsx:!0,title:'"promise.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: ci\nspec:\n  # workerClusterResources:\n  # xaasCrd:\n  # xaasRequestPipeline:\n")),(0,i.kt)("h4",{id:"defining-the-xaascrd"},"Defining the xaasCrd"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is the interface you are exposing to the platform users. It defines what\nproperties they are allowed to configure when requesting a new instance of that promised\nservice."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Unsure what is a Custom Resource Definition (CRD)?"),(0,i.kt)("p",null,"A ",(0,i.kt)("em",null,"resource")," is an endpoint in the Kubernetes API that stores a collection of API objects of a certain kind; for example, the built-in pods resource contains a collection of Pod objects."),(0,i.kt)("p",null,"A ",(0,i.kt)("em",null,"custom resource")," is an extension of the Kubernetes API that is not necessarily available in a default Kubernetes installation. It represents a customization of a particular Kubernetes installation. However, many core Kubernetes functions are now built using custom resources, making Kubernetes more modular."),(0,i.kt)("p",null,"The ",(0,i.kt)("em",null,"CustomResourceDefinition API")," resource allows you to define custom resources."),(0,i.kt)("p",null,"Learn more ",(0,i.kt)("a",{href:"https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/",target:"__blank"},"here."))),(0,i.kt)("p",null,"For the purpose of this tutorial, you will create an API that accepts two parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," parameter called ",(0,i.kt)("inlineCode",{parentName:"li"},"name"),": the name that identifies the CI deployment."),(0,i.kt)("li",{parentName:"ul"},"a ",(0,i.kt)("inlineCode",{parentName:"li"},"string")," parameter called ",(0,i.kt)("inlineCode",{parentName:"li"},"toolkit"),": the underlying CI/CD software to be\nprovided. For now, you will only support Jenkins.")),(0,i.kt)("p",null,"Replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," field in ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml")," with the complete field details\nbelow. Ensure the indentation is correct (",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is nested under ",(0,i.kt)("inlineCode",{parentName:"p"},"spec"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="xaasCrd in promise.yaml"',jsx:!0,title:'"xaasCrd',in:!0,'promise.yaml"':!0},"  xaasCrd:\n    apiVersion: apiextensions.k8s.io/v1\n    kind: CustomResourceDefinition\n    metadata:\n      name: ci.example.promise.syntasso.io\n    spec:\n      group: example.promise.syntasso.io\n      scope: Namespaced\n      names:\n        plural: ci\n        singular: ci\n        kind: ci\n      versions:\n      - name: v1\n        served: true\n        storage: true\n        schema:\n          openAPIV3Schema:\n            type: object\n            properties:\n              spec:\n                type: object\n                properties:\n                  name: { type: string }\n                  toolkit: { type: string }\n")),(0,i.kt)("p",null,"You have now defined the as-a-Service API."),(0,i.kt)("h3",{id:"worker-cluster-resources"},"Define the Worker Cluster Resources"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required in order to complete the\ndelivery of a requested instance. Kratix applies this content on all registered worker\nclusters."),(0,i.kt)("p",null,"Since we are only supporting Jenkins in our CI Promise, the ",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources"),"\nneeds only to contain the Jenkins Operator and its CRDs. For simplicity, you will use the\nFlux provided ",(0,i.kt)("inlineCode",{parentName:"p"},"HelmRepository")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"HelmRelease")," APIs present in the Worker Cluster.\nThese allow Helm charts to be defined and referenced easily and are available because the\nGitOps provider of choice for this demo is FluxCD."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Unsure what is an Operator?"),(0,i.kt)("p",null,'The Kubernetes project defines "Operator" in a simple way: ',(0,i.kt)("strong",null,"Operators are software extensions that use custom resources to manage applications and their components"),". In other words, using Operators enables us to view an application as a single object that exposes only the adjustments that make sense for the application, instead of a collection of primitives (such as Pods, Deployments, Services, or ConfigMaps)."),(0,i.kt)("p",null,"Learn more ",(0,i.kt)("a",{href:"https://www.cncf.io/blog/2022/06/15/kubernetes-operators-what-are-they-some-examples",target:"__blank"},"here."))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Unsure what is Helm?"),(0,i.kt)("p",null,"Helm helps you manage Kubernetes applications \u2014 Helm Charts help you define, install, and upgrade even the most complex Kubernetes application."),(0,i.kt)("p",null,"Learn more ",(0,i.kt)("a",{href:"https://helm.sh",target:"__blank"},"here."))),(0,i.kt)("p",null,"Replace the ",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," field in the ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml")," with the complete field\ndetails below. Ensure the indentation is correct (",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," is nested\nunder ",(0,i.kt)("inlineCode",{parentName:"p"},"spec"),")."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="workerClusterResources in promise.yaml"',jsx:!0,title:'"workerClusterResources',in:!0,'promise.yaml"':!0},"  workerClusterResources:\n  - apiVersion: source.toolkit.fluxcd.io/v1beta1\n    kind: HelmRepository\n    metadata:\n      name: jenkins-operator-repo\n    spec:\n      interval: 20s\n      url: https://raw.githubusercontent.com/jenkinsci/kubernetes-operator/master/chart\n  - apiVersion: helm.toolkit.fluxcd.io/v2beta1\n    kind: HelmRelease\n    metadata:\n      name: jenkins-operator\n    spec:\n      interval: 20s\n      values:\n        jenkins:\n          enabled: false\n      chart:\n        spec:\n          chart: jenkins-operator\n          sourceRef:\n            kind: HelmRepository\n            name: jenkins-operator-repo\n          version: 0.6.2\n")),(0,i.kt)("h3",{id:"create-pipeline"},"Create your Resource Request Pipeline"),(0,i.kt)("p",null,"The Kratix pipeline is where you encode all of the business logic to generate a\ncompliant instance request while still using any custom values provided by the\nuser request."),(0,i.kt)("h4",{id:"pipeline-script"},"Build a simple request pipeline"),(0,i.kt)("p",null,"To support Jenkins in our CI Promise, our pipeline will need to create a valid\nJenkins custom resource document, as defined by the Operator. The pipeline\nimage will include a basic template for this Jenkins document and will update\nit depending on the user specific request details."),(0,i.kt)("p",null,"First, let's define the base document. Update the contents of ",(0,i.kt)("inlineCode",{parentName:"p"},"asset.yaml")," to contain the\nfollowing:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="request-pipeline-image/asset.yaml"',jsx:!0,title:'"request-pipeline-image/asset.yaml"'},'apiVersion: jenkins.io/v1alpha2\nkind: Jenkins\nmetadata:\n  name: REPLACE_ME\n  namespace: default\nspec:\n  configurationAsCode:\n    configurations: []\n    secret:\n      name: ""\n  groovyScripts:\n    configurations: []\n    secret:\n      name: ""\n  jenkinsAPISettings:\n    authorizationStrategy: createUser\n  master:\n    basePlugins:\n    - name: kubernetes\n      version: "1.31.3"\n    - name: workflow-job\n      version: "1180.v04c4e75dce43"\n    - name: workflow-aggregator\n      version: "2.7"\n    - name: git\n      version: "4.11.0"\n    - name: job-dsl\n      version: "1.79"\n    - name: configuration-as-code\n      version: "1414.v878271fc496f"\n    - name: kubernetes-credentials-provider\n      version: "0.20"\n    disableCSRFProtection: false\n    containers:\n      - name: jenkins-master\n        image: jenkins/jenkins:2.332.2-jdk17\n        imagePullPolicy: Always\n        command:\n          - bash\n          - -c\n          - /var/jenkins/scripts/init.sh && /usr/bin/tini -s -- /usr/local/bin/jenkins.sh\n        env:\n          - name: JAVA_OPTS\n            value: -Xmx125m -XX:MinRAMPercentage=50.0 -XX:MaxRAMPercentage=80.0 -Djenkins.install.runSetupWizard=false -Djava.awt.headless=true\n        livenessProbe:\n          failureThreshold: 12\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 100\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 5\n        readinessProbe:\n          failureThreshold: 10\n          httpGet:\n            path: /login\n            port: http\n            scheme: HTTP\n          initialDelaySeconds: 80\n          periodSeconds: 10\n          successThreshold: 1\n          timeoutSeconds: 1\n        resources:\n          limits:\n            cpu: 1500m\n            memory: 3Gi\n          requests:\n            cpu: "1"\n            memory: 500Mi\n')),(0,i.kt)("p",null,"Now update the ",(0,i.kt)("inlineCode",{parentName:"p"},"execute-pipeline.sh")," script to update the template with the user-provided\nname when the request is of a new Jenkins:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'jsx title="request-pipeline-image/execute-pipeline.sh"',jsx:!0,title:'"request-pipeline-image/execute-pipeline.sh"'},"#!/bin/sh\n\nset -x\n\n# Read users input from the object\nexport NAME=$(yq eval '.spec.name' /input/object.yaml)\ntoolkit=$(yq eval '.spec.toolkit' /input/object.yaml)\n\nif [[ \"${toolkit}\" = \"jenkins\" ]]; then\n  # Replace defaults with user provided values\n  # and place the contents in /output/\n  cat asset.yaml |  \\\n    yq eval '.metadata.name = env(NAME)' - \\\n    > /output/jenkins_instance.yaml\nelse\n  echo \"${toolkit} is not supported\"\n  exit 1\nfi\n")),(0,i.kt)("p",null,"You've successfully wired up the pipeline to create a Jenkins custom resource that\nmatches the users desired input."),(0,i.kt)("p",null,"Before going ahead and shipping this Promise its good to test it works first. You can\ntest the Docker container image by supplying an input resource and examining the output\nresource."),(0,i.kt)("p",null,"Create a sample ",(0,i.kt)("inlineCode",{parentName:"p"},"object.yaml")," Resource Request in the ",(0,i.kt)("inlineCode",{parentName:"p"},"test-input/")," directory with the\ncontents below"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="request-pipeline-image/test-input/object.yaml"',jsx:!0,title:'"request-pipeline-image/test-input/object.yaml"'},"apiVersion: example.promise.syntasso.io/v1\nkind: ci\nmetadata:\n  name: example-resource-request\nspec:\n  name: super-cool-name\n  toolkit: jenkins\n")),(0,i.kt)("p",null,"To test, run the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker build --tag kratix-workshop/ci-request-pipeline:dev -f request-pipeline-image/Dockerfile request-pipeline-image\ndocker run -v ${PWD}/request-pipeline-image/test-input:/input -v ${PWD}/request-pipeline-image/test-output:/output kratix-workshop/ci-request-pipeline:dev\n")),(0,i.kt)("p",null,"Verify the contents of the ",(0,i.kt)("inlineCode",{parentName:"p"},"request-pipeline-image/test-output"),"/ directory contains the\ndesired ",(0,i.kt)("inlineCode",{parentName:"p"},"metadata.name"),"."),(0,i.kt)("h3",{id:"define-the-pipeline-image"},"Define the Pipeline image"),(0,i.kt)("p",null,"The final step of creating the ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," is to reference your docker image\nfrom the ",(0,i.kt)("inlineCode",{parentName:"p"},"spec.xaasRequestPipeline")," field in the ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,i.kt)("p",null,"Add the image to the array in ",(0,i.kt)("inlineCode",{parentName:"p"},"promise.yaml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jsx title="promise.yaml"',jsx:!0,title:'"promise.yaml"'},"apiVersion: platform.kratix.io/v1alpha1\nkind: Promise\nmetadata:\n  name: ci\nspec:\n  workerClusterResources:\n  xaasCrd:\n    ...\n  #highlight-start\n  xaasRequestPipeline:\n  - kratix-workshop/ci-request-pipeline:dev\n  #highlight-end\n")),(0,i.kt)("p",null,"For simplicity, we will load the pipeline image directly into the KinD Platform Cluster\nwith the command below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Load image to KinD cache"',title:'"Load',image:!0,to:!0,KinD:!0,'cache"':!0},"kind load docker-image kratix-workshop/ci-request-pipeline:dev --name platform\n")),(0,i.kt)("h3",{id:"install-promise"},"Install your Promise"),(0,i.kt)("p",null,"From the ",(0,i.kt)("inlineCode",{parentName:"p"},"promise-template")," directory, run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Apply Promise"',title:'"Apply','Promise"':!0},"kubectl apply --context kind-platform --filename promise.yaml\n")),(0,i.kt)("p",null,"Verify the Promise installed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get crds\n")),(0,i.kt)("p",null,"The above command will give an output similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                  CREATED AT\n//highlight-next-line\nci.example.promise.syntasso.io   2021-09-09T11:21:10Z\n")),(0,i.kt)("br",null),(0,i.kt)("p",null,"Verify the Jenkins Operator is running:",(0,i.kt)("br",null),(0,i.kt)("sub",null,"(This may take a few minutes so ",(0,i.kt)("code",null,"--watch")," will watch the command. Press ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"C")," to stop watching)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get pods --watch\n")),(0,i.kt)("p",null,"The above command will give an output similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                 READY   STATUS    RESTARTS   AGE\n//highlight-next-line\njenkins-operator-6c89d97d4f-r474w    1/1     Running   0          1m\n")),(0,i.kt)("p",null,"And that's it! Your job as a Platform Engineer is done!"),(0,i.kt)("h2",{id:"platform-user"},"Platform User"),(0,i.kt)("h3",{id:"create-resource-request"},"Submit a Kratix Resource Request"),(0,i.kt)("p",null,"The users of your platform can now request instances of Jenkins. Update\n",(0,i.kt)("inlineCode",{parentName:"p"},"resource-request.yaml")," with the following content:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'jxs title="promise-template/resource-request.yaml"',jxs:!0,title:'"promise-template/resource-request.yaml"'},"apiVersion: example.promise.syntasso.io/v1\nkind: ci\nmetadata:\n  name: team-a-ci\nspec:\n  name: super-cool-name\n  toolkit: jenkins\n")),(0,i.kt)("p",null,"You can now send the resource request to Kratix:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Request a new Jenkins"',title:'"Request',a:!0,new:!0,'Jenkins"':!0},"kubectl apply --context kind-platform --filename resource-request.yaml\n")),(0,i.kt)("p",null,"Applying the Kratix Promise will trigger your pipeline. You can see the pipeline by\nchecking the pods:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-platform get pods\n")),(0,i.kt)("p",null,"This should result in something similar to:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console"},"NAME                                READY   STATUS      RESTARTS   AGE\n//highlight-next-line\nrequest-pipeline-ci-default-9d40b   0/1     Completed   0          1m\n")),(0,i.kt)("p",null,"You can view the pipeline logs with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl logs \\\n  --context kind-platform \\\n  --selector kratix-promise-id=ci-default \\\n  --container xaas-request-pipeline-stage-1\n")),(0,i.kt)("p",null,"Then you can watch for the creation of your Jenkins instance by targeting the Worker Cluster:",(0,i.kt)("br",null),(0,i.kt)("sub",null,"(This may take a few minutes so ",(0,i.kt)("code",null,"--watch")," will watch the command. Press ",(0,i.kt)("kbd",null,"Ctrl"),"+",(0,i.kt)("kbd",null,"C")," to stop watching)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kubectl --context kind-worker get pods --watch\n")),(0,i.kt)("p",null,"The above command will eventually give an output similar to"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:"{2}","{2}":!0},"NAME                           READY   STATUS    RESTARTS   AGE\njenkins-super-cool-name        1/1     Running   0          1m\n...\n")),(0,i.kt)("h3",{id:"use-your-jenkins-instance"},"Use your Jenkins instance"),(0,i.kt)("p",null,"Access the Jenkins UI in a browser to ensure the instance is working."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("em",{parentName:"p"},(0,i.kt)("strong",{parentName:"em"},"Open a new terminal to request the port forward")),"."),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-console"},"kubectl --context kind-worker port-forward jenkins-super-cool-name 8080:8080\n"))),(0,i.kt)("p",null,"Navigate to ",(0,i.kt)("a",{parentName:"p",href:"http://localhost:8080"},"http://localhost:8080")," and log in with the\ncredentials you get from the commands below:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'jsx title="username"',jsx:!0,title:'"username"'},"kubectl --context kind-worker get secret jenkins-operator-credentials-super-cool-name \\\n    -o 'jsonpath={.data.user}' | base64 -d\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-console",metastring:'jsx title="password"',jsx:!0,title:'"password"'},"kubectl --context kind-worker get secret jenkins-operator-credentials-super-cool-name \\\n    -o 'jsonpath={.data.password}' | base64 -d\n")),(0,i.kt)("p",null,"Let's now take a look at what you have done in more details."),(0,i.kt)("h3",{id:"promise-review"},"Review of a Kratix Promise parts (in detail)"),(0,i.kt)("h4",{id:"xaascrd"},(0,i.kt)("inlineCode",{parentName:"h4"},"xaasCrd")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," is your user-facing API for the Promise. It defines the options that users\ncan configure when they request the Promise. The complexity of the ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasCrd")," API is up to\nyou. You can read more about writing Custom Resource Definitions in the ",(0,i.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#create-a-customresourcedefinition"},"Kubernetes\ndocs"),"."),(0,i.kt)("h4",{id:"workerclusterresources"},(0,i.kt)("inlineCode",{parentName:"h4"},"workerClusterResources")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," describes everything required to fulfil the Promise. Kratix\napplies this content on all registered Worker Clusters. For instance with the CI\nPromise, the ",(0,i.kt)("inlineCode",{parentName:"p"},"workerClusterResources")," contains the Jenkins CRD, the Jenkins Operator, and\nthe resources the Operator requires. If in the future you decide to support\nother CI tools, you'll need to add the dependencies for them in here."),(0,i.kt)("h4",{id:"xaasrequestpipeline"},(0,i.kt)("inlineCode",{parentName:"h4"},"xaasRequestPipeline")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," defines a set of jobs to run when Kratix receives a request for\nan instance of one of its Promises."),(0,i.kt)("p",null,"The pipeline is an array of Docker images, and those images are executed in order. The\npipeline enables you to write Promises with specialised images and combine those images\nas needed."),(0,i.kt)("p",null,"Each container in the ",(0,i.kt)("inlineCode",{parentName:"p"},"xaasRequestPipeline")," array should output complete, valid\nKubernetes resources."),(0,i.kt)("p",null,"The contract with each pipeline container is simple and straightforward:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The first container in the list receives the resource document created by the user's\nrequest","\u2014","this request will comply with the ",(0,i.kt)("inlineCode",{parentName:"li"},"xaasCrd")," described above. The document\nis available to the pipeline in ",(0,i.kt)("inlineCode",{parentName:"li"},"/input/object.yaml"),"."),(0,i.kt)("li",{parentName:"ul"},"The container's command then executes with the input object and fulfils its\nresponsibilites."),(0,i.kt)("li",{parentName:"ul"},"The container writes any resources to be created to ",(0,i.kt)("inlineCode",{parentName:"li"},"/output/"),"."),(0,i.kt)("li",{parentName:"ul"},"The resources in ",(0,i.kt)("inlineCode",{parentName:"li"},"/output")," of the last container in the ",(0,i.kt)("inlineCode",{parentName:"li"},"xaasRequestPipeline")," array\nwill be scheduled and applied to the appropriate Worker Clusters.")),(0,i.kt)("h2",{id:"summary"},"Recap"),(0,i.kt)("p",null,"You have now authored your first promise. Congratulations \ud83c\udf89"),(0,i.kt)("h2",{id:"teardown"},"Tearing it all down"),(0,i.kt)("p",null,"To clean up your environment, run the following command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"kind delete clusters platform worker\n")))}c.isMDXComponent=!0}}]);